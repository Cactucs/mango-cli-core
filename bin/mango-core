#!/usr/bin/env node
var checkError = require('../lib/helpers/checkerror')
var Config = require('../lib/helpers/config')
var log = require('better-console')
var Mango = require('../lib/mango')
var path = require('path')
var pkg = require('../package.json')
var program = require('commander')
var runcmd = require('../lib/helpers/runcmd')
var unique = require('../lib/helpers/unique')

program
	.version(pkg.version)

program
	.command('install [packages...]')
	.alias('i')
	.description('NPM install of passed packages or dependencies specified in config')
	.action(function install(packages) {
		var dir = process.cwd()
		var config = new Config()
		var mainconfig = config.get(true)
		var fullconfig = config.get()

		var onFinish = function() {
			log.timeEnd('~ installation time')
			if(fullconfig.hooks && fullconfig.hooks.install) {
				log.info('~ install hook: ' + fullconfig.hooks.install)
				runcmd(fullconfig.hooks.install, null, function() {
					log.info('/>')
				})
			} else {
				log.info('/>')
			}
		}

		var doInstall = function() {
			log.time('~ installation time')
			// Install only passed packages and update mango.json
			if(packages.length > 0) {
				var _config = { dependencies: packages }
				var mango = new Mango(dir, _config)

				mango.install(function(err) {
					checkError(err)
					if(!mainconfig.dependencies) mainconfig.dependencies = []
					mainconfig.dependencies = unique(mainconfig.dependencies.concat(packages))
					config.save(mainconfig)
					onFinish()
				})
			}
			// Install packages specifies in mango.json
			else {
				var mango = new Mango(dir, fullconfig)
				mango.install(function(err) {
					checkError(err)
					onFinish()
				})
			}
		}


		// Run preinstall hook first
		if(fullconfig.hooks && fullconfig.hooks.preinstall) {
			log.info('~ preinstall hook: ' + fullconfig.hooks.preinstall)
			runcmd(fullconfig.hooks.preinstall, null, doInstall)
		}
		// Run immediately
		else {
			doInstall()
		}

	})

program
	.command('build [tasks...]')
	.alias('b')
	.description('build project assets for production')
	.action(function build(tasks) {
		var config = new Config().get()
		var mango = new Mango(process.cwd(), config)

		var doBuild = function() {
			log.time('~ compilation time')
			mango.build(tasks, function(err) {
				log.timeEnd('~ compilation time')
				checkError(err)
				if(config.hooks && config.hooks.build) {
					log.info('~ build hook: ' + config.hooks.build)
					runcmd(config.hooks.build, null, function() {
						log.info('/>')
					})
				} else {
					log.info('/>')
				}
			})
		}

		// Run prebuild hook first
		if(config.hooks && config.hooks.prebuild) {
			log.info('~ prebuild hook: ' + config.hooks.prebuild)
			runcmd(config.hooks.prebuild, null, doBuild)
		}
		// Run immediately
		else {
			doBuild()
		}

	})

program.parse(process.argv)

if(program.args.length === 0) {
	program.help()
}
